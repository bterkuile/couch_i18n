= CouchI18n

This projects is created to make translations editable. It is created using
the simply_stored gem. To use the web frontend please read the README section
on this carefully. Important to know is that this system sits *on top* of the
standard YAML translation system. To import all yml translations to the CouchDB
database type:
  CouchI18n::Store.import_from_yaml
Now all translations are ported to the database. If you change then now in the
yaml files, they will nolonger be displayed in the website. They should be managed
in the database. This gem also provides a translation management system. To place this
in your own design, create a file _app/views/layouts/couch_i18n/application.html.haml_ with the 
following content:
  = render :template => '/layouts/application'
Or create your own really nice template. Let me know if there is a nice layout!
Your Gemfile should look like:
  gem 'simply_stored', :git => 'git://github.com/bterkuile/simply_stored.git'
  gem 'couch_i18n'
  gem 'kaminari'
And in your config routes put:
  namespace :couch_i18n do
    root :to => "stores#index"
    resources :stores do
      collection do
        post :export
        post :import
      end
    end
  end
Or to put is at a different location:
  namespace :translations, :module => :couch_i18n, :as => 'couch_i18n' do
    root :to => "stores#index"
    resources :stores do
      collection do
        post :export
        post :import
      end
    end
  end
The intention is to make this a mountable application, but this will not happen 
before Rails 3.1 is officially out. But beware of using this if your application
will not be Rails 3.1 compatible.

== Security!!!
By default there is no security activated for editing the translation. This is 
a choice since you should be in control over your own security. To help you 
securing the translations in your application I will describe the steps I did
to add declarative_authorization security into the translation. Start with an
initializer: _config/initializers/couch_I18n_modifications.rb_
  require 'couch_i18n/application_controller'
  module CouchI18n
    class ApplicationController
      def current_user
        Authorization.current_user
      end
      include Authorization::AuthorizationInController
      filter_access_to :all
      def permission_denied
        redirect_to root_path, :alert => I18n.t('authorization.not_authorized')
      end
    end
  end
And in _config/authorization_rules.rb_ put your personalized version of:
  role :translator do
    has_permission_on :couch_i18n_stores, :to => [:manage, :import, :export]
  end
Beware that a permission denied message will appear when the server is restarted
this way. This is because the current user is set in ApplicationController which
is not part of the CouchI18n controller stack.

== TODO
Here my todo list for this project. Makes it insightful for everybody what is on
the planning of being made.
* Check on locale inclusion with are you sure? force creation of new locale. Mostly a stupic mistake omitting these.
* Add grouped deletes. Dangerous, but controllable using the declarative_authorization example
* Add grouped search/replaces to move one group of translations to another section. Same comment as above
* Search through values. If anyone has a better idea than searching by ruby through all the translations or adding lucene please feel free.
* Good import export functionality
